use md::Md;

struct Counter {}

impl Counter {
    fn emit(host: string, counter: string) -> string {
        let md = Md::new();
        let inner = md.to_html(
            "
# Welcome to My World

Posted on April 6, 2024

## Happy Anniversary dwarf!

Today marks the one year anniversary of my programming language: [dwarf](https://github.com/uberFoo/dwarf).
I'm celebrating with a web page from the 90's! ☺️
The seriously cool bit is that this site is served by dwarf itself, using the [hyper](https://hyper.rs) HTTP library.

I started dwarf hoping it wouldn't take more that a few months.
And for my purposes maybe I was done in a few months, but it's really taken a life of it's own.
And here it is a year later.

My original plan was to create a simple DSL that I could use in the \"parent\" project.
That project involves models and code generation, and I'd like to write about it in the future.
All I really thought I needed was a simple, but typed, scripting language.
Using Rust as a starting place seemed like a good idea (when I started learning rust I really wanted a REPL).
As I dug into it, there were some features I thought would be useful.
The useful bits became things that would just be cool.
It was at this point I think that I became a language junkie.

There are a ton of language features that I didn't expect to implement.
I ended up adding generics because I couldn't live without `Option<T>` and `Result<T, E>`.
I think I added enums before generics, and I didn't think I'd need them at first.

Loadable modules (shared libraries) were a must, and I'm glad I added them, despite the time it took to make it work.
Besides the VM (which was not planned) and the compiler (again, not planned), async took the most time.
In fact it was such a pain, and the result so neat, I split it off into the crate [puteketeke](https://docs.rs/puteketeke/latest/puteketeke/).

My toy language is actually now generally useful.
Not to say that it should be used -- there are a ton of corner cases (which is just a euphemism for unusual, consistent bugs).
However it's most definitely useful for me, and as I use it more, the more bugs that will get fixed.

## Moving Forward

My plan currently is to build a real blogging platform with dwarf, with this page as a start.
It feels like a fun way to continue to build and develop the language, while building something real.
I hope to also come out of this with an abstraction for building sites: a framework perhaps?

To that end I plan on posting regular updates and insights into the language, the platform, and random thoughts and ideas.
To whet your whistle, there is a counter below.
The dwarf source code for the counter (the entire server, including this content, in fact) is just below.
(If you are interested, feel free to peruse the [source code](https://github.com/uberFoo/uberfoo.rs)).

<form id='myForm' action='' method='post'>
    <fieldset>
            <button type='button' id='decrement_button' name='foo' value='decrement'>-</button>
            <label id='counter'>${counter}</label>
            <button type='button' id='increment_button' name='foo' value='increment'>+</button>
    </fieldset>
</form>

## Technical Gibberish

```rust
use http::server::HttpServer;
use http::server::Method;
use http::server::Request;

mod slash;

async fn main() -> Future<()> {
    let server = HttpServer::new();
    let counter = 0;

    server.route(\"/\", Method::Get, |req: Request| -> string {
        slash::Slash::emit(counter)
    });

    server.route(\"/counter\", Method::Get, |req: Request| -> string {
        \"＄{counter}\"
    });

    server.route(\"/increment\", Method::Post, |req: Request| -> string {
        counter = counter + 1;
        \"＄{counter}\"
    });

    server.route(\"/decrement\", Method::Post, |req: Request| -> string {
        counter = counter - 1;
        \"＄{counter}\"
    });

    server.route(\"/help\", Method::Get, |req: Request| -> string {
        \"
        <p>hit the /counter endpoint to view the counter</p>
        <p>post to /increment to increment the counter</p>
        <p>post to /decrement to decrement the counter</p>
        \"
    });

    server.serve(80).await
}
```

Notice that the counter variable is not only shared between the routes, but it's also shared with the `server.serve()` method.
That means that this counter is not unique to any single session.
Or, turned on it's head, the counter is shared between all sessions.

Another interesting thing to point out is that the routes pass closures to the server.
This is necessary so that we can return the right stuff when an endpoint is hit.
Getting this done was no small feat.

To call the closure from the dynamic library involves saving the closed over function and environment in the main memory space.
The saved function is then invoked across the FFI boundary from the dynamic library.
And of course the result must be returned from the main binary to the shared library.
Ultimately it's a pretty simple solution, and getting there was tricky.
I'll write a post about it soon.

I hope that you found this post gratifying.
If you do plan on coming back -- this space is under construction, and it's gonna be awesome.
And don't forget to visit the dwarf repository and leave a star!
Please, and thank you!

  -- Keith Star
",
        );

        "<!DOCTYPE html>
<html lang='en'>
<head>
    <script async src=\"https://www.googletagmanager.com/gtag/js?id=G-RZXB2EDQ6F\"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'G-RZXB2EDQ6F');
    </script>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>Persistence!</title>
    <style>
        @import url(\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/tomorrow-night-bright.css\");
        @import url(\"https://fonts.googleapis.com/css2?family=JetBrains+Mono&display=swap\");

        body {
            background-image: url(\"/hacking.webp\");
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
            background-attachment: fixed;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #fff;
            /* White text color */
            font-family: \"JetBrains Mono\", monospace;
            /* Monospaced, old school feel */
        }

        body::before {
            content: \"\";
            position: fixed;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            background-image: url(\"/hacking.webp\");
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
            z-index: -1;
        }

        .body-container {
            text-align: left;
            margin-top: 60px;
            padding: 20px;
            background-color: rgba(0, 0, 0, 0.8);
            /* Semi-transparent black background for readability */
            border-radius: 10px;
            width: 90%;
            /* Adjust based on layout needs */
            max-width: 800px;
            /* Maximum width */
            min-height: 100vh;
        }

        @media (max-width: 600px) {
            .body-container {
                with: 100%;
                max-width: none;
            }
        }

        .body-container blockquote {
            margin: 20px;
            padding: 20px;
            background-color: #333; /* Dark background, resembling a terminal */
            border-left: 10px solid #0c7b93; /* A bright teal accent line */
            color: #8ec07c; /* Light green color typical of old monochrome monitors */
            font-family: 'Courier New', Courier, monospace; /* Monospaced font for the code-like appearance */
            text-shadow: 0 0 3px #000; /* Text shadow for a slight glowing effect */
            box-shadow: 0 2px 5px rgba(0,0,0,0.2); /* Subtle shadow for depth */
            border-radius: 4px; /* Soften the edges */
        }

        .body-container blockquote p {
            margin: 0; /* Remove default margin */
            font-family: \"3270\", monospace;
            font-size: 1.1em; /* Slightly larger font size for emphasis */
        }

        .body-container code {
            border-radius: 10px;
            color: #9edc8f;
            padding: 2px 4px;
            font-size: 1em;
            font-family: \"3270\", monospace;
        }

        .body-container h1, .body-container h2, .body-container h3, .body-container h4, .body-container h5, .body-container h6 {
            color: green;
            /* text-shadow: 2px 2px 4px rgba(55, 155, 55, 0.5); */
        }

        .body-container h1 {
            font-size: 2em;
        }

        .body-container p {
            font-size: 1em;
        }

        .body-container a {
            display: inline-block;
            margin-top: 5px;
            padding: 0px 5px;
            background-color: #0c7b93;
            color: white;
            text-decoration: none;
            border-radius: 5px;
        }

        .body-container a:hover {
            background-color: #0a5968;
        }

        .body-container canvas {
            background-color: #000000;
        }

    .nav-container {
        background-color: rgba(0, 0, 0, 0.8); /* Semi-transparent black */
        text-align: center;
        box-shadow: 0 2px 4px rgba(0,0,0,0.5); /* Soft shadow for depth */
        padding: 10px 0; /* Padding to give some space inside the container */
        width: 100%; /* Full width */
        position: fixed; /* Fixed at the top */
        top: 0;
        left: 0;
        z-index: 1000; /* Ensure it's above other content */
    }

    nav ul {
        list-style: none;
        padding: 0;
        margin: 0;
        display: inline-block; /* Centering the nav list if text-align is center */
    }

    nav ul li {
        display: inline-block;
    }

    nav ul li a {
        text-decoration: none;
        padding: 10px 20px;
        color: white;
        display: block;
    }

    nav ul li ul {
        display: none;
        position: absolute;
        background-color: #444;
    }

    nav ul li:hover ul {
        display: block; /* Show dropdown on hover */
    }

    nav ul li ul li {
        display: block;
    }

    </style>
    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>
    <script src=\"https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js\"></script>
    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js\"></script>
    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/rust.min.js\"></script>
    <script src='https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js'></script>
    <script>hljs.highlightAll();</script>
    <script>
        $(document).ready(function(){
            $('form').submit(function(event){
                // Prevent the default form submission
                event.preventDefault();
            });

            $('#increment_button').click(function(){
                // Send the form data using AJAX
                $.ajax({
                    type: 'POST',
                    url: 'https://${host}/increment',
                    success: function(response){
                        // Update the page content with the response from the server
                        // location.reload();
                        $('#counter').text(response);
                        fetchDataAndDrawChart();
                    }
                });
            });

             $('#decrement_button').click(function(){
                // Send the downvote data using AJAX
                $.ajax({
                    type: 'POST',
                    url: 'https://${host}/decrement',
                    success: function(response){
                        // Update the page content with the response from the server
                        // location.reload();
                        $('#counter').text(response);
                        fetchDataAndDrawChart();
                    }
                });
            });
        });
    </script>
</head>
<body>
    <div class=\"nav-container\">
    <nav>
    <ul>
        <li><a href=\"/\">Home</a></li>
        <li><a href=\"/categories\">Categories</a>
            <ul>
                <li><a href=\"/category/technology\">Technology</a></li>
                <li><a href=\"/category/lifestyle\">Lifestyle</a></li>
                <!-- More categories -->
            </ul>
        </li>
        <li><a href=\"/about\">About</a></li>
        <li><a href=\"/archive\">Archive</a></li>
        <li><a href=\"/contact\">Contact</a></li>
    </ul>
</nav>
</div>
    <div class=\"body-container\">
    "
        + inner +
        "<footer style='text-align: right; padding: 20px;'>
                <a href=\"mailto:uberfoo@me.com\">Reach out!</a>
                <a href='https://twitter.com/share?ref_src=twsrc%5Etfw' class='twitter-share-button' data-show-count='false'>Tweet</a><script async src='https://platform.twitter.com/widgets.js' charset='utf-8'></script>
                <a href='https://twitter.com/uberFoo?ref_src=twsrc%5Etfw' class='twitter-follow-button' data-show-count='false'>Follow @uberFoo</a><script async src='https://platform.twitter.com/widgets.js' charset='utf-8'></script>
                <a href='https://www.github.com/uberFoo' target='_blank'>
                    <img src='https://${host}/github-mark-white.png' width='25'>
                </a>
            </footer>
    </div>
</body>
</html>
        "
    }
}

struct Db {}

impl Db {
    fn emit(host: string, counter: string) -> string {
        let md = Md::new();
        let inner = md.to_html(
            "
# Welcome to My World

Posted on April 16, 2024

## Ready for a database?

[Last time](https://uberfoo.rs/blog/counter) I introduced dwarf, and showed off a counter.
I also stated my intention to use a blog as a motivation.

To really get a blog off the ground we really need a place to store our posts.
Currently these are just files in the file system, and that's not going to cut it for long.
To that end I created a simple database plugin for dwarf.
Next time I'll discuss the plugin architecture, and how exactly we get this to work in Rust.

For now enjoy a persistent counter, with a chart to boot!
The chart shows the last 50 updates to the counter.
The y-axis is the counter value, and the x-axis is the time of the update and the scale is seconds.


<form id='myForm' action='' method='post'>
    <fieldset>
            <button type='button' id='decrement_button' name='foo' value='decrement'>-</button>
            <label id='counter'>${counter}</label>
            <button type='button' id='increment_button' name='foo' value='increment'>+</button>
    </fieldset>
</form>

",
        );

        "<!DOCTYPE html>
<html lang='en'>
<head>
    <script async src=\"https://www.googletagmanager.com/gtag/js?id=G-RZXB2EDQ6F\"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'G-RZXB2EDQ6F');
    </script>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>Persistence!</title>
    <style>
        @import url(\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/tomorrow-night-bright.css\");
        @import url(\"https://fonts.googleapis.com/css2?family=JetBrains+Mono&display=swap\");

        body {
            background-image: url(\"/hacking.webp\");
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
            background-attachment: fixed;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #fff;
            /* White text color */
            font-family: \"JetBrains Mono\", monospace;
            /* Monospaced, old school feel */
        }

        body::before {
            content: \"\";
            position: fixed;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            background-image: url(\"/hacking.webp\");
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
            z-index: -1;
        }

        .body-container {
            text-align: left;
            margin-top: 60px;
            padding: 20px;
            background-color: rgba(0, 0, 0, 0.8);
            /* Semi-transparent black background for readability */
            border-radius: 10px;
            width: 90%;
            /* Adjust based on layout needs */
            max-width: 800px;
            /* Maximum width */
            min-height: 100vh;
        }

        @media (max-width: 600px) {
            .body-container {
                with: 100%;
                max-width: none;
            }
        }

        .body-container blockquote {
            margin: 20px;
            padding: 20px;
            background-color: #333; /* Dark background, resembling a terminal */
            border-left: 10px solid #0c7b93; /* A bright teal accent line */
            color: #8ec07c; /* Light green color typical of old monochrome monitors */
            font-family: 'Courier New', Courier, monospace; /* Monospaced font for the code-like appearance */
            text-shadow: 0 0 3px #000; /* Text shadow for a slight glowing effect */
            box-shadow: 0 2px 5px rgba(0,0,0,0.2); /* Subtle shadow for depth */
            border-radius: 4px; /* Soften the edges */
        }

        .body-container blockquote p {
            margin: 0; /* Remove default margin */
            font-family: \"3270\", monospace;
            font-size: 1.1em; /* Slightly larger font size for emphasis */
        }

        .body-container code {
            border-radius: 10px;
            color: #9edc8f;
            padding: 2px 4px;
            font-size: 1em;
            font-family: \"3270\", monospace;
        }

        .body-container h1, .body-container h2, .body-container h3, .body-container h4, .body-container h5, .body-container h6 {
            color: green;
            /* text-shadow: 2px 2px 4px rgba(55, 155, 55, 0.5); */
        }

        .body-container h1 {
            font-size: 2em;
        }

        .body-container p {
            font-size: 1em;
        }

        .body-container a {
            display: inline-block;
            margin-top: 5px;
            padding: 0px 5px;
            background-color: #0c7b93;
            color: white;
            text-decoration: none;
            border-radius: 5px;
        }

        .body-container a:hover {
            background-color: #0a5968;
        }

        .body-container canvas {
            background-color: #000000;
        }

    .nav-container {
        background-color: rgba(0, 0, 0, 0.8); /* Semi-transparent black */
        text-align: center;
        box-shadow: 0 2px 4px rgba(0,0,0,0.5); /* Soft shadow for depth */
        padding: 10px 0; /* Padding to give some space inside the container */
        width: 100%; /* Full width */
        position: fixed; /* Fixed at the top */
        top: 0;
        left: 0;
        z-index: 1000; /* Ensure it's above other content */
    }

    nav ul {
        list-style: none;
        padding: 0;
        margin: 0;
        display: inline-block; /* Centering the nav list if text-align is center */
    }

    nav ul li {
        display: inline-block;
    }

    nav ul li a {
        text-decoration: none;
        padding: 10px 20px;
        color: white;
        display: block;
    }

    nav ul li ul {
        display: none;
        position: absolute;
        background-color: #444;
    }

    nav ul li:hover ul {
        display: block; /* Show dropdown on hover */
    }

    nav ul li ul li {
        display: block;
    }

    </style>
    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>
    <script src=\"https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js\"></script>
    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js\"></script>
    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/rust.min.js\"></script>
    <script src='https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js'></script>
    <script>hljs.highlightAll();</script>
    <script>
        $(document).ready(function(){
            $('form').submit(function(event){
                // Prevent the default form submission
                event.preventDefault();
            });

            $('#increment_button').click(function(){
                // Send the form data using AJAX
                $.ajax({
                    type: 'POST',
                    url: 'https://${host}/increment',
                    success: function(response){
                        // Update the page content with the response from the server
                        // location.reload();
                        $('#counter').text(response);
                        fetchDataAndDrawChart();
                    }
                });
            });

             $('#decrement_button').click(function(){
                // Send the downvote data using AJAX
                $.ajax({
                    type: 'POST',
                    url: 'https://${host}/decrement',
                    success: function(response){
                        // Update the page content with the response from the server
                        // location.reload();
                        $('#counter').text(response);
                        fetchDataAndDrawChart();
                    }
                });
            });
        });
    </script>
</head>
<body>
    <div class=\"nav-container\">
    <nav>
    <ul>
        <li><a href=\"/\">Home</a></li>
        <li><a href=\"/categories\">Categories</a>
            <ul>
                <li><a href=\"/category/technology\">Technology</a></li>
                <li><a href=\"/category/lifestyle\">Lifestyle</a></li>
                <!-- More categories -->
            </ul>
        </li>
        <li><a href=\"/about\">About</a></li>
        <li><a href=\"/archive\">Archive</a></li>
        <li><a href=\"/contact\">Contact</a></li>
    </ul>
</nav>
</div>
    <div class=\"body-container\">
    "
        + inner +
        "
    <canvas id=\"myChart\"></canvas>
    <script>
        function clearCanvas(canvasId) {
            // Get the canvas element and its parent
            const canvas = document.getElementById(canvasId);
            const parent = canvas.parentNode;

            // Create a new canvas element
            const newCanvas = document.createElement('canvas');
            newCanvas.id = canvasId;

            // Replace the old canvas with the new one
            parent.replaceChild(newCanvas, canvas);
        }

        let myChart = null;
        function fetchDataAndDrawChart() {
            // clearCanvas('myChart');

            fetch('https://${host}/counter_data')
                .then(response => response.json())
                .then(data => {
                    const ctx = document.getElementById('myChart').getContext('2d');
                    const timestamps = data.map(item => item.timestamp);
                    const values = data.map(item => item.value);

                    if (myChart) {
                        myChart.data.labels = timestamps;
                        myChart.data.datasets[0].data = values;
                        myChart.update();
                    } else {
                        // console.log(\"creating seconds chart\");
                        myChart = new Chart(ctx, {
                            type: 'line', // You can change this to 'bar', 'line', etc.
                            data: {
                                labels: timestamps,
                                datasets: [{
                                    label: 'Counter Over Time',
                                    data: values,
                                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                                    borderColor: 'rgba(132, 0, 132, 1)',
                                    borderWidth: 1
                                }]
                            },
                            options: {
                                scales: {
                                    x: {
                                        type: 'time',
                                        time: {
                                            unit: 'hour'
                                        }
                                    },
                                }
                            }
                        });
                    }
                })
                .catch(error => console.error('Error fetching data:', error));
        }

        fetchDataAndDrawChart();
    </script>
    <footer style='text-align: right; padding: 20px;'>
        <a href=\"mailto:uberfoo@me.com\">Reach out!</a>
        <a href='https://twitter.com/share?ref_src=twsrc%5Etfw' class='twitter-share-button' data-show-count='false'>Tweet</a><script async src='https://platform.twitter.com/widgets.js' charset='utf-8'></script>
        <a href='https://twitter.com/uberFoo?ref_src=twsrc%5Etfw' class='twitter-follow-button' data-show-count='false'>Follow @uberFoo</a><script async src='https://platform.twitter.com/widgets.js' charset='utf-8'></script>
        <a href='https://www.github.com/uberFoo' target='_blank'>
                    <img src='https://${host}/github-mark-white.png' width='25'>
        </a>
    </footer>
    </div>
</body>
</html>
        "
    }
}
